package mvc.service.impl;

import cache.DataItem;
import cache.GisData;
import mvc.service.KeyAreaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import util.JacksonUtil;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author: xianlehuang
 * @Description:重点区域
 * @date: 2019/9/27 - 15:06
 */
@Service
public class KeyAreaServiceImpl implements KeyAreaService {
    @Autowired
    protected JdbcTemplate jdbcTemplate;

    private Map<String, Object> map;

    private JacksonUtil jacksonUtil = JacksonUtil.buildNormalBinder();

    @Override
    public String findarea() {
        String sql="select t.*, t.ALARMNUM ALARM from TB_KEY_AREA@db69 t ORDER BY NLSSORT(t.area_name,'NLS_SORT = SCHINESE_PINYIN_M')";
        List<Map<String, Object>> list = jdbcTemplate.queryForList(sql);
        if(list!=null){
            for (int i = 0; i < list.size(); i++) {
                list.get(i).put("ALARMNUM",String.valueOf(list.get(i).get("ALARMNUM")).split(";").length>=getybjnum()+1?String.valueOf(list.get(i).get("ALARMNUM")).split(";")[getybjnum()]:"0");
            }
        }
        return jacksonUtil.toJson(list);
    }

    //不同的时间段选择不同的报警数
    public int getybjnum(){
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        String t = sdf.format(new Date());
        int a = timenum(t);
        if(a==timenum("23:58")||a==timenum("23:59")||a==timenum("00:02")||a==timenum("00:01")){
            return 0;
        }else if(a>=timenum("00:03")&&a<=timenum("00:57")){
            return 1;
        }else if(a>=timenum("00:58")&&a<=timenum("01:02")){
            return 2;
        }else if(a>=timenum("01:03")&&a<=timenum("01:57")){
            return 3;
        }else if(a>=timenum("01:58")&&a<=timenum("02:02")){
            return 4;
        }else if(a>=timenum("02:03")&&a<=timenum("02:57")){
            return 5;
        }else if(a>=timenum("02:58")&&a<=timenum("03:02")){
            return 6;
        }else if(a>=timenum("03:03")&&a<=timenum("03:57")){
            return 7;
        }else if(a>=timenum("03:58")&&a<=timenum("04:02")){
            return 8;
        }else if(a>=timenum("04:03")&&a<=timenum("04:57")){
            return 9;
        }else if(a>=timenum("04:58")&&a<=timenum("05:02")){
            return 10;
        }else if(a>=timenum("05:03")&&a<=timenum("05:57")){
            return 11;
        }else if(a>=timenum("05:58")&&a<=timenum("06:02")){
            return 12;
        }else if(a>=timenum("06:03")&&a<=timenum("06:57")){
            return 13;
        }else if(a>=timenum("06:58")&&a<=timenum("07:02")){
            return 14;
        }else if(a>=timenum("07:03")&&a<=timenum("07:57")){
            return 15;
        }else if(a>=timenum("07:58")&&a<=timenum("08:02")){
            return 16;
        }else if(a>=timenum("08:03")&&a<=timenum("08:57")){
            return 17;
        }else if(a>=timenum("08:58")&&a<=timenum("09:02")){
            return 18;
        }else if(a>=timenum("09:03")&&a<=timenum("09:57")){
            return 19;
        }else if(a>=timenum("09:58")&&a<=timenum("10:02")){
            return 20;
        }else if(a>=timenum("10:03")&&a<=timenum("10:57")){
            return 21;
        }else if(a>=timenum("10:58")&&a<=timenum("11:02")){
            return 22;
        }else if(a>=timenum("11:03")&&a<=timenum("11:57")){
            return 23;
        }else if(a>=timenum("11:58")&&a<=timenum("12:02")){
            return 24;
        }else if(a>=timenum("12:03")&&a<=timenum("12:57")){
            return 25;
        }else if(a>=timenum("12:58")&&a<=timenum("13:02")){
            return 26;
        }else if(a>=timenum("13:03")&&a<=timenum("13:57")){
            return 27;
        }else if(a>=timenum("13:58")&&a<=timenum("14:02")){
            return 28;
        }else if(a>=timenum("14:03")&&a<=timenum("14:57")){
            return 29;
        }else if(a>=timenum("14:58")&&a<=timenum("15:02")){
            return 30;
        }else if(a>=timenum("15:03")&&a<=timenum("15:57")){
            return 31;
        }else if(a>=timenum("15:58")&&a<=timenum("16:02")){
            return 32;
        }else if(a>=timenum("16:03")&&a<=timenum("16:57")){
            return 33;
        }else if(a>=timenum("16:58")&&a<=timenum("17:02")){
            return 34;
        }else if(a>=timenum("17:03")&&a<=timenum("17:57")){
            return 35;
        }else if(a>=timenum("17:58")&&a<=timenum("18:02")){
            return 36;
        }else if(a>=timenum("18:03")&&a<=timenum("18:57")){
            return 37;
        }else if(a>=timenum("18:58")&&a<=timenum("19:02")){
            return 38;
        }else if(a>=timenum("19:03")&&a<=timenum("19:57")){
            return 39;
        }else if(a>=timenum("19:58")&&a<=timenum("20:02")){
            return 40;
        }else if(a>=timenum("20:03")&&a<=timenum("20:57")){
            return 41;
        }else if(a>=timenum("20:58")&&a<=timenum("21:02")){
            return 42;
        }else if(a>=timenum("21:03")&&a<=timenum("21:57")){
            return 43;
        }else if(a>=timenum("21:58")&&a<=timenum("22:02")){
            return 44;
        }else if(a>=timenum("22:03")&&a<=timenum("22:57")){
            return 45;
        }else if(a>=timenum("22:58")&&a<=timenum("23:02")){
            return 46;
        }else if(a>=timenum("23:03")&&a<=timenum("23:57")){
            return 47;
        }else{
            return 0;
        }
    }

    //时分转为分钟数
    public int timenum(String arg){
        return Integer.parseInt(arg.split(":")[0])*60+Integer.parseInt(arg.split(":")[1]);
    }

    @Override
    public Integer addarea(String name, String describe, String coordinates, String size, String warning) {
        String cx="select * from TB_KEY_AREA@db69 where area_name='"+name+"'";
        List<Map<String, Object>> list=jdbcTemplate.queryForList(cx);
        int count=0;
        if(list.size()>0){
            count=-1;
            return count;
        }else{
            String sql="insert into TB_KEY_AREA@db69 (area_name,area_describe,area_coordinates,area_size,alarmnum)" +
                    "values ('"+name+"','"+describe+"','"+coordinates+"','"+size+"','"+warning+"')";
            count=jdbcTemplate.update(sql);
            return count;
        }
    }

    @Override
    public Integer updatearea(String id, String name, String describe, String coordinates, String size, String warning) {
        String cx="select * from TB_KEY_AREA@db69 where area_name='"+name+"' and area_id !='"+id+"'";
        List<Map<String, Object>> list=jdbcTemplate.queryForList(cx);
        int count=0;
        if(list.size()>0){
            count=-1;
            return count;
        }else{
            String sql="update TB_KEY_AREA@db69 set area_name='"+name+"',area_describe='"+describe+"'," +
                    "area_coordinates='"+coordinates+"',area_size='"+size+"' ,ALARMNUM='"+warning+"' where area_id='"+id+"'";
            count=jdbcTemplate.update(sql);
            return count;
        }
    }

    @Override
    public Integer deletearea(String id) {
        int count=0;
        String sql="delete from TB_KEY_AREA@db69 where area_id='"+id+"'";
        count=jdbcTemplate.update(sql);
        return count;
    }

    //重点区域车辆数量月报表
    @Override
    public String getKeyAreasVehicleQuantityMonthlyReport(String area, String time) {
        //查询每一天,每个区域车辆数量总数
        List<Map<String, Object>> areasList = findDays(time, area);

        //查询本月份的每一天车辆数量总数
        List<Map<String, Object>> monthList = findMonth(time, area, "总计");

        //查询上月份的每一天车辆数量总数
        List<Map<String, Object>> lastMonthList = findMonth(getTime(time, "上月"), area, "上月");

        //查询上一年的本月份的每一天车辆数量总数
        List<Map<String, Object>> lastYearMonthList = findMonth(getTime(time, "上年本月"), area, "上年本月");

        //合并
        List<Map<String, Object>> list = new ArrayList(monthList);
        list.addAll(lastMonthList);
        list.addAll(lastYearMonthList);
        //全部（导出使用）
        List<Map<String, Object>> allList = new ArrayList(areasList);
        allList.addAll(list);

        map = new HashMap();
        map.put("area",areasList);
        map.put("total",list);
        map.put("all",allList);
        return jacksonUtil.toJson(map);
    }

    //查询每一天,每个区域车辆数量
    private List<Map<String, Object>> findDays(String time, String area) {
        String tj = "";
        if(area!=null&&!area.isEmpty()&&!area.equals("null")&&area.length()>0&&!area.equals("")){
            String address="";
            for(int i=0;i<area.split(",").length;i++){
                address += "'" + area.split(",")[i] + "',";
            }
            address = address.substring(0, (address.length() - 1));
            tj += " and a.area_id in ("+address+")";
        }
        //计算一个月最大的天数
        Calendar c = Calendar.getInstance();
        c.set(Calendar.YEAR, Integer.parseInt(time.split("-")[0])); //年
        c.set(Calendar.MONTH, Integer.parseInt(time.split("-")[1])-1); //月-1
        Integer maxDate = c.getActualMaximum(Calendar.DATE);

        String sql = "select ";
        for(int i=1;i<=maxDate;i++){
            sql += " d"+(i)+".d"+(i)+",";
        }
        sql += "a.area_id, a.area_name from (select a.area_name, a.area_id from tb_key_area@db69 a where 1=1";
        sql +=tj;
        sql += " ) a";
        for(int i=1;i<=maxDate;i++){
            int m = i;
            sql += " left join (select a.area_id,sum(area_num) d"+m+" from  tb_key_area_num@db69 a" +
                    " where to_char(a.DB_TIME,'yyyy-MM-fmdd')='"+time+"-"+m+"'";
            sql +=tj;
            sql +=" group by a.area_id ) d"+m+" on a.area_id=d"+m+".area_id";
        }
        sql +=" order by nlssort(a.area_name,'NLS_SORT=SCHINESE_PINYIN_M')";
        List<Map<String, Object>> list=jdbcTemplate.queryForList(sql);
        return list;
    }

    //查询指定月份的每一天车辆数量总数
    private List<Map<String, Object>> findMonth(String month, String area, String type) {
        String tj = "";
        if(area!=null&&!area.isEmpty()&&!area.equals("null")&&area.length()>0&&!area.equals("")){
            String address="";
            for(int i=0;i<area.split(",").length;i++){
                address += "'" + area.split(",")[i] + "',";
            }
            address = address.substring(0, (address.length() - 1));
            tj += " and a.area_id in ("+address+")";
        }
        //计算一个月最大的天数
        Calendar c = Calendar.getInstance();
        c.set(Calendar.YEAR, Integer.parseInt(month.split("-")[0])); //年
        c.set(Calendar.MONTH, Integer.parseInt(month.split("-")[1])-1); //月-1
        Integer maxDate = c.getActualMaximum(Calendar.DATE);

        String sql = "select ";
        for(int i=1;i<=maxDate;i++){
            sql += " d"+(i)+".d"+(i)+",";
        }
        sql += " a.area_name from (select '"+type+"' area_name from dual a where 1=1";
        sql += " ) a";
        for(int i=1;i<=maxDate;i++){
            int m = i;
            sql += " left join (select sum(area_num) d"+m+" from  tb_key_area_num@db69 a" +
                    " where to_char(a.DB_TIME,'yyyy-MM-fmdd')='"+month+"-"+m+"'";
            sql +=tj;
            sql +=" ) d"+m+" on 1=1";
        }
        sql +=" order by nlssort(a.area_name,'NLS_SORT=SCHINESE_PINYIN_M')";
        List<Map<String, Object>> list=jdbcTemplate.queryForList(sql);
        return list;
    }

    //获取时间
    private String getTime(String time, String type){
        DateFormat sdf =  new SimpleDateFormat("yyyy-MM");
        Date date = null;
        try{
            date = sdf.parse(time);
        }catch(Exception e){
            e.printStackTrace();
        }
        Calendar c = Calendar.getInstance();
        c.setTime(date);
        String wantDate = "";
        if(type.equals("上月")){
            c.add(Calendar.MONTH, -1);
            wantDate = sdf.format(c.getTime());
        }else if(type.equals("上年本月")){
            c.add(Calendar.YEAR, -1);
            wantDate = sdf.format(c.getTime());
        }
        return wantDate;
    }

    @Override
    public String getKeyAreasVehicleQuantityHalfAYearReport(String area, String time, String type) {

        //查询每个月,每个区域车辆数量总数
        List<Map<String, Object>> areasList = findHalfAYearAreas(time, area, type);

        //查询每个月车辆数量总数
        List<Map<String, Object>> monthList = findHalfAYearMonth(time, area, "总计", type);

        //查询上一年的本月份车辆数量总数
        List<Map<String, Object>> lastYearMonthList = findHalfAYearMonth(String.valueOf(Integer.parseInt(time)-1), area, "上年本月", type);

        //合并
        List<Map<String, Object>> list = new ArrayList(monthList);
        list.addAll(lastYearMonthList);
        //全部（导出使用）
        List<Map<String, Object>> allList = new ArrayList(areasList);
        allList.addAll(list);

        map = new HashMap();
        map.put("area",areasList);
        map.put("total",list);
        map.put("all",allList);
        return jacksonUtil.toJson(map);
    }

    //查询每个月,每个区域车辆数量总数
    private List<Map<String, Object>> findHalfAYearAreas(String time, String area, String type) {
        String tj = "";
        if(area!=null&&!area.isEmpty()&&!area.equals("null")&&area.length()>0&&!area.equals("")){
            String address="";
            for(int i=0;i<area.split(",").length;i++){
                address += "'" + area.split(",")[i] + "',";
            }
            address = address.substring(0, (address.length() - 1));
            tj += " and a.area_id in ("+address+")";
        }
        //计算上半年、下半年或一整年月份
        Integer math = 0;
        String a[] = null;
        if(type.equals("1")||type.equals("2")){
            math = 6;
            a = new String[math];
            if(type.equals("1")){
                for (int i = 1; i < 7; i++) {
                    a[i-1]=time+"-0"+i;
                }
            }else if(type.equals("2")){
                for (int i = 7; i < 13; i++) {
                    if(i<10){
                        a[i-7]=time+"-0"+i;
                    }else{
                        a[i-7]=time+"-"+i;
                    }
                }
            }
        }else if(type.equals("0")){
            math = 12;
            a = new String[math];
            for (int i = 1; i < 13; i++) {
                if(i<10){
                    a[i-1]=time+"-0"+i;
                }else{
                    a[i-1]=time+"-"+i;
                }
            }
        }
        String sql = "select ";
        for(int i=1;i<=a.length;i++){
            sql += " d"+(i)+".d"+(i)+",";
        }
        sql += "a.area_id, a.area_name from (select a.area_name, a.area_id from tb_key_area@db69 a where 1=1";
        sql +=tj;
        sql += " ) a";
        for(int i=1;i<=a.length;i++){
            int m = i;
            sql += " left join (select a.area_id,sum(area_num) d"+m+" from  tb_key_area_num@db69 a" +
                    " where to_char(a.DB_TIME,'yyyy-MM')='"+a[i-1]+"'";
            sql +=tj;
            sql +=" group by a.area_id ) d"+m+" on a.area_id=d"+m+".area_id";
        }
        sql +=" order by nlssort(a.area_name,'NLS_SORT=SCHINESE_PINYIN_M')";
        List<Map<String, Object>> list=jdbcTemplate.queryForList(sql);
        return list;
    }

    //查询指定月份车辆数量总数
    private List<Map<String, Object>> findHalfAYearMonth(String time, String area, String selectType, String type) {
        String tj = "";
        if(area!=null&&!area.isEmpty()&&!area.equals("null")&&area.length()>0&&!area.equals("")){
            String address="";
            for(int i=0;i<area.split(",").length;i++){
                address += "'" + area.split(",")[i] + "',";
            }
            address = address.substring(0, (address.length() - 1));
            tj += " and a.area_id in ("+address+")";
        }
        //计算上半年、下半年或一整年月份
        Integer math = 0;
        String a[] = null;
        if(type.equals("1")||type.equals("2")){
            math = 6;
            a = new String[math];
            if(type.equals("1")){
                for (int i = 1; i < 7; i++) {
                    a[i-1]=time+"-0"+i;
                }
            }else if(type.equals("2")){
                for (int i = 7; i < 13; i++) {
                    if(i<10){
                        a[i-7]=time+"-0"+i;
                    }else{
                        a[i-7]=time+"-"+i;
                    }
                }
            }
        }else if(type.equals("0")){
            math = 12;
            a = new String[math];
            for (int i = 1; i < 13; i++) {
                if(i<10){
                    a[i-1]=time+"-0"+i;
                }else{
                    a[i-1]=time+"-"+i;
                }
            }
        }

        String sql = "select ";
        for(int i=1;i<=a.length;i++){
            sql += " d"+(i)+".d"+(i)+",";
        }
        sql += " a.area_name from (select '"+selectType+"' area_name from dual a where 1=1";
        sql += " ) a";
        for(int i=1;i<=a.length;i++){
            int m = i;
            sql += " left join (select sum(area_num) d"+m+" from  tb_key_area_num@db69 a" +
                    " where to_char(a.DB_TIME,'yyyy-MM')='"+a[i-1]+"'";
            sql +=tj;
            sql +=" ) d"+m+" on 1=1";
        }
        sql +=" order by nlssort(a.area_name,'NLS_SORT=SCHINESE_PINYIN_M')";
        List<Map<String, Object>> list=jdbcTemplate.queryForList(sql);
        return list;
    }

    @Override
    public List<Map<String, Object>> getAreaMonitor() {
        String sql = "select * from TB_KEY_AREA@db69 t ORDER BY CASE when area_name='北京市' then 1 else  2 end";
        List<Map<String, Object>>list=jdbcTemplate.queryForList(sql);
        if(list!=null){
            for (int i = 0; i < list.size(); i++) {
                list.get(i).put("ALARMNUM",String.valueOf(list.get(i).get("ALARMNUM")).split(";").length>=getybjnum()+1?String.valueOf(list.get(i).get("ALARMNUM")).split(";")[getybjnum()]:"0");
            }
        }
        return list;
    }

    @Override
    public List<Map<String, Object>> getVehicleMonitor() {
        String sql = "select * from VW_VEHICLE@db69 t left join tb_mdt_status@db69 s  on t.mdt_no=s.mdt_no";
        List<Map<String, Object>>list=jdbcTemplate.queryForList(sql);
        if(list!=null){
            for (int i = 0; i < list.size(); i++) {
                list.get(i).put("STIME",list.get(i).get("STIME")==null?"":String.valueOf(list.get(i).get("STIME")).substring(0,19));
            }
        }
        return list;
    }

    @Override
    public String qyjk() {
        DataItem data = (DataItem) GisData.map.get("data");
        if(null != data){
            Map map = new HashMap();
            map.put("vehilist", data.getVehilist());
            map.put("arealist",  data.getArealist());
            map.put("num",  data.getNum());
            //System.out.println(vehilist.size());
            return jacksonUtil.toJson(map);
        }
        return "{}";
    }

    @Override
    public String getDoubtfulDeck(String vehicle, String type, String point, String stime, String etime, Integer currentPage, Integer pageSize) {
        String tj="";
        if(stime!=null&&!stime.isEmpty()&&!stime.equals("null")&&stime.length()>0&&!stime.equals("开始时间")){
            tj += " and b.ERROR_TIME >=to_date('"+stime+"','yyyy-MM-dd hh24:mi:ss')";
        }
        if(etime!=null&&!etime.isEmpty()&&!etime.equals("null")&&etime.length()>0&&!etime.equals("结束时间")){
            tj += " and b.ERROR_TIME <=to_date('"+etime+"','yyyy-MM-dd hh24:mi:ss')";
        }
        if(vehicle!=null&&!vehicle.isEmpty()&&!vehicle.equals("null")&&vehicle.length()>0&&!vehicle.equals("车牌号码")){
            tj += " and b.VEHICLE_NO= '"+vehicle+"'";
        }
        if(type!=null&&!type.isEmpty()&&!type.equals("null")&&type.length()>0&&!type.equals("类型")){
            tj += " and b.ERROR_TYPE = '"+type+"'";
        }
        if(point!=null&&!point.isEmpty()&&!point.equals("null")&&point.length()>0&&!point.equals("采集点")){
            tj += " and b.ERROR_ADDRESS = '"+point+"'";
        }
        String sql = "select (select count(1) from (SELECT DISTINCT	b.*	FROM TB_BLACK_TAXI b" +
                " LEFT JOIN  tb_global_vehicle@db69 v ON b.VEHICLE_NO = v.plate_number" +
                " WHERE	b.VEHICLE_NO LIKE '浙AT%' AND v.plate_number IS NULL";
        sql += tj;
        sql += ")a ) as COUNT,tt.* from (select t.*,rownum as rn from (SELECT DISTINCT b.* FROM TB_BLACK_TAXI b" +
                " LEFT JOIN  tb_global_vehicle@db69 v ON b.VEHICLE_NO = v.plate_number" +
                " WHERE	b.VEHICLE_NO LIKE '浙AT%' AND v.plate_number IS NULL";
        sql += tj;
        sql +=" order by b.ERROR_TIME desc ) t where rownum <= "+(currentPage*pageSize);
        sql +=")tt where tt.rn >"+((currentPage-1)*pageSize);

        List<Map<String, Object>>list=jdbcTemplate.queryForList(sql);
        map = new HashMap ();
        int count=0;
        if(list.size()>0){
            for (int i = 0; i < list.size(); i++) {
                list.get(i).put("ERROR_TYPE","套牌");
                list.get(i).put("ERROR_TIME",list.get(i).get("ERROR_TIME")==null?"":String.valueOf(list.get(i).get("ERROR_TIME")).substring(0,19));
            }
            count = Integer.parseInt(String.valueOf(list.get(0).get("COUNT")));
        }
        map.put("count", count);
        map.put("datas",list);
        return jacksonUtil.toJson(map);
    }

    @Override
    public String getSuspectedBlackCar(String vehicle, String type, String point, String stime, String etime, Integer currentPage, Integer pageSize) {
        String tj="";
        if(stime!=null&&!stime.isEmpty()&&!stime.equals("null")&&stime.length()>0&&!stime.equals("开始时间")){
            tj += " and b.ERROR_TIME >=to_date('"+stime+"','yyyy-MM-dd hh24:mi:ss')";
        }
        if(etime!=null&&!etime.isEmpty()&&!etime.equals("null")&&etime.length()>0&&!etime.equals("结束时间")){
            tj += " and b.ERROR_TIME <=to_date('"+etime+"','yyyy-MM-dd hh24:mi:ss')";
        }
        if(vehicle!=null&&!vehicle.isEmpty()&&!vehicle.equals("null")&&vehicle.length()>0&&!vehicle.equals("车牌号码")){
            tj += " and b.VEHICLE_NO= '"+vehicle+"'";
        }
        if(type!=null&&!type.isEmpty()&&!type.equals("null")&&type.length()>0&&!type.equals("类型")){
            tj += " and b.ERROR_TYPE = '"+type+"'";
        }
        if(point!=null&&!point.isEmpty()&&!point.equals("null")&&point.length()>0&&!point.equals("采集点")){
            tj += " and b.ERROR_ADDRESS = '"+point+"'";
        }
        String sql = "select (select count(1) from (SELECT DISTINCT	b.*	FROM TB_BLACK_TAXI b" +
                " LEFT JOIN  tb_global_vehicle@db69 v ON b.VEHICLE_NO = v.plate_number" +
                " WHERE	b.VEHICLE_NO LIKE '浙AT%' AND v.plate_number IS NULL";
        sql += tj;
        sql += ")a ) as COUNT,tt.* from (select t.*,rownum as rn from (SELECT DISTINCT b.* FROM TB_BLACK_TAXI b" +
                " LEFT JOIN  tb_global_vehicle@db69 v ON b.VEHICLE_NO = v.plate_number" +
                " WHERE	b.VEHICLE_NO LIKE '浙AT%' AND v.plate_number IS NULL";
        sql += tj;
        sql +=" order by b.ERROR_TIME desc ) t where rownum <= "+(currentPage*pageSize);
        sql +=")tt where tt.rn >"+((currentPage-1)*pageSize);

        List<Map<String, Object>>list=jdbcTemplate.queryForList(sql);
        map = new HashMap ();
        int count=0;
        if(list.size()>0){
            for (int i = 0; i < list.size(); i++) {
                list.get(i).put("ERROR_TIME",list.get(i).get("ERROR_TIME")==null?"":String.valueOf(list.get(i).get("ERROR_TIME")).substring(0,19));
            }
            count = Integer.parseInt(String.valueOf(list.get(0).get("COUNT")));
        }
        map.put("count", count);
        map.put("datas",list);
        return jacksonUtil.toJson(map);
    }

    @Override
    public String getAbnormalOperationValuatorAnalysis(String vehicle, String stime, String etime, Integer currentPage, Integer pageSize) {
        String tj="";
        java.text.DecimalFormat df=new java.text.DecimalFormat("#0.00");
        if(stime!=null&&!stime.isEmpty()&&!stime.equals("null")&&stime.length()>0&&!stime.equals("开始时间")){
            tj += " and b.s_time >=to_date('"+stime+"','yyyy-MM-dd hh24:mi:ss')";
        }
        if(etime!=null&&!etime.isEmpty()&&!etime.equals("null")&&etime.length()>0&&!etime.equals("结束时间")){
            tj += " and b.s_time <=to_date('"+etime+"','yyyy-MM-dd hh24:mi:ss')";
        }
        if(vehicle!=null&&!vehicle.isEmpty()&&!vehicle.equals("null")&&vehicle.length()>0&&!vehicle.equals("车牌号码")){
            tj += " and '浙'||b.vhic= '"+vehicle+"'";
        }
        String sql = "select (select count(1) from TB_TAXI_PRIVIDE@db69 b WHERE	1=1";
        sql += tj;
        sql += ") as COUNT,tt.* from (select t.*,rownum as rn from (SELECT b.* from TB_TAXI_PRIVIDE@db69 b" +
                " WHERE 1=1";
        sql += tj;
        sql +=" order by b.s_time desc ) t where rownum <= "+(currentPage*pageSize);
        sql +=")tt where tt.rn >"+((currentPage-1)*pageSize);

        List<Map<String, Object>>list=jdbcTemplate.queryForList(sql);
        map = new HashMap ();
        int count=0;
        if(list.size()>0){
            for (int i = 0; i < list.size(); i++) {
                list.get(i).put("S_TIME",list.get(i).get("S_TIME")==null?"":String.valueOf(list.get(i).get("S_TIME")).substring(0,19));
                list.get(i).put("E_TIME",list.get(i).get("E_TIME")==null?"":String.valueOf(list.get(i).get("E_TIME")).substring(0,19));
                list.get(i).put("VHIC",list.get(i).get("VHIC")==null?"":"浙"+String.valueOf(list.get(i).get("VHIC")));
                //计价器里程
                double jjq = list.get(i).get("J_MILE")==null?0.00:Double.parseDouble(list.get(i).get("J_MILE").toString());
                //程序计算里程(GPS里程)
                double gps = list.get(i).get("S_MILE")==null?0.00:Double.parseDouble(list.get(i).get("S_MILE").toString());
                list.get(i).put("J_MILE",df.format(jjq));
                list.get(i).put("S_MILE",df.format(gps));
                //速度最优里程(最短时间里程)
                list.get(i).put("RDONE",df.format(jjq/gps));
                list.get(i).put("id",i+1);
            }
            count = Integer.parseInt(String.valueOf(list.get(0).get("COUNT")));
        }
        map.put("count", count);
        map.put("datas",list);
        return jacksonUtil.toJson(map);
    }

    @Override
    public String getAbnormalOperatingMileageAnalysis(String time, Integer low, Integer high) {
        String tj1="";
        String tj2="";
        String date = time.replaceAll("-", "").substring(0,6);
        if(time!=null&&!time.isEmpty()&&!time.equals("null")&&time.length()>0){
            tj1 += " and to_char(t.jsyysj, 'yyyy-MM-dd') ='"+time+"'";
        }
        if(low!=null&&low>0&&high!=null&&high>0){
            tj2= " case when v.s >= 0 and v.s < "+low+" then '0-"+low+"' "
                    + " when v.s >= "+low+" and v.s < "+high+" then '"+low+"-"+high+"' "
                    + " else '"+high+"以上' end";
        }
        String sql = "select ";
        sql += tj2;
        sql+=" as ti,count(v.cphm) as count, time from (select sum(t.szlc) as s, t.cphm, to_char(t.jsyysj, 'yyyy-MM-dd') time from JJQ_TJ_"+date+"_DAY@jjq89 t"
                + " where 1=1";
        sql += tj1;
        sql += " group by t.cphm , to_char(t.jsyysj, 'yyyy-MM-dd')) v group by time,";
        sql += tj2;
        sql +=" order by ti";
        List<Map<String, Object>>list=jdbcTemplate.queryForList(sql);
        return jacksonUtil.toJson(list);
    }

    @Override
    public String getAbnormalOperatingMileageAnalysisDetails(String time, Integer low, Integer high) {
        String date = time.replaceAll("-", "").substring(0,6);
        String tj1= "";
        String tj2= "";
        if(time!=null&&!time.isEmpty()&&!time.equals("null")&&time.length()>0){
            tj1 += " and to_char(t.jsyysj, 'yyyy-MM-dd') ='"+time+"'";
        }
        if(low!=null&&low>0){
            tj2 += " and a.s >= "+low;
        }
        if(high!=null&&high>=0){
            tj2 += " and a.s < "+high;
        }
        String sql = "select * from (select sum(t.szlc) as S,'浙'||t.CPHM CPHM,t.DAY,t.ZGS,t.FGS from JJQ_TJ_"+date+"_DAY@jjq89  t" +
                " where 1=1";
        sql+=tj1;
        sql +=" group by t.cphm,t.day,t.zgs,t.fgs) a where 1=1 ";
        sql +=tj2;
        sql +=" order by a.S";
        List<Map<String, Object>>list=jdbcTemplate.queryForList(sql);
        return jacksonUtil.toJson(list);
    }

    @Override
    public String getSingleOperationAnomalyAnalysis(String time, Integer low, Integer high) {
        String tj1="";
        String tj2="";
        String date = time.replaceAll("-", "").substring(0,6);
        if(time!=null&&!time.isEmpty()&&!time.equals("null")&&time.length()>0){
            tj1 += " and to_char(t.jsyysj, 'yyyy-MM-dd') ='"+time+"'";
        }
        if(low!=null&&low>0&&high!=null&&high>0){
            tj2= " case when v.c >= 0 and v.c < "+low+" then '0-"+low+"' "
                    + " when v.c >= "+low+" and v.c < "+high+" then '"+low+"-"+high+"' "
                    + " else '"+high+"以上' end";
        }
        String sql = "select ";
        sql += tj2;
        sql+=" as ti,count(v.cphm) as count,time from (select count(t.cphm) c,t.cphm, to_char(t.jsyysj, 'yyyy-MM-dd') time from JJQ_TJ_"+date+"_DAY@jjq89  t"
                + " where 1=1";
        sql += tj1;
        sql += " group by t.cphm, to_char(t.jsyysj, 'yyyy-MM-dd') ) v group by time,";
        sql += tj2;
        sql +=" order by ti";
        List<Map<String, Object>>list=jdbcTemplate.queryForList(sql);
        return jacksonUtil.toJson(list);
    }

    @Override
    public String getSingleOperationAnomalyAnalysisDetails(String time, Integer low, Integer high) {
        String tj1="";
        String tj2="";
        String date = time.replaceAll("-", "").substring(0,6);
        if(time!=null&&!time.isEmpty()&&!time.equals("null")&&time.length()>0){
            tj1 += " and to_char(t.jsyysj, 'yyyy-MM-dd') ='"+time+"'";
        }
        if(low!=null&&low>0){
            tj2 += " and v.c >= "+low;
        }
        if(high!=null&&high>=0){
            tj2 += " and v.c < "+high;
        }
        String sql = "select * from (select count(t.cphm) as C, '浙'||t.CPHM CPHM,t.DAY,t.ZGS,t.FGS from JJQ_TJ_"+date+"_DAY@jjq89  t"
                +" where 1=1";
        sql+=tj1;
        sql+=" group by t.cphm ,t.day,t.zgs,t.fgs) v where 1=1 ";
        sql+=tj2;
        sql +=" order by v.c";
        List<Map<String, Object>>list=jdbcTemplate.queryForList(sql);
        return jacksonUtil.toJson(list);
    }
}
